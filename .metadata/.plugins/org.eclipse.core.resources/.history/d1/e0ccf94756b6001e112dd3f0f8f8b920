package com.enterprise.management.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.enterprise.management.entities.Employees;
import com.enterprise.management.repositories.EmployeesRepository;

@RestController
@RequestMapping(value = "/employees")
public class EmployeeController {
	
	@Autowired
	private EmployeesRepository repository;
	
	@GetMapping
	public List<Employees> findAll(){
		List<Employees> result = repository.findAll();
		return result;
	}
	
	@GetMapping(value = "/{id}")
	public Employees findById(@PathVariable Long id){
		Employees result = repository.findById(id).get();
		return result;
	}
	
	// Ajustar o not null
	@PostMapping
	public Employees insert( @RequestBody Employees employee){
		Employees result = repository.save(employee);
		return result;
	}
	
	@DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEmployeeById(@PathVariable Long id) {
        boolean employeeExists = repository.existsById(id);

        if (!employeeExists) {
            return ResponseEntity.notFound().build();
        }

        repository.deleteById(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }
	
	@GetMapping("/{cep}")
	public ResponseEntity<Employees> getEmployeeByCep(@PathVariable String cep) {
	    Optional<Employees> employee = repository.findByCep(cep);

	    if (employee.isPresent()) {
	        return ResponseEntity.ok(employee.get());
	    } else {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
	    }
	}
	
	
}
